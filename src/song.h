#pragma once
#include <string>
#include <vector>

class Song
{
    private: /* Data in Order of Importance */
        std::string id;                             //Primary identifier for the track, generated by Spotify
        std::string name;                   //The title of the track
        std::vector<std::string> artists;   //The list of artists credited for production of the track

        /* USER INPUT PARAMETERS */
        bool _explicit;                     //Whether the track contains explicit content or not
        int acousticness;                   //Metric of the track being acoustic
        int danceability;                   //Metric of the track being danceable
        int energy;                         //Metric of the energy of the track
        int instrumentalness;               //Metric of the track being instrumental
        int liveness;                       //Metrico of the track sounding as a live performance
        int loudness;                       //Metric of the loudness of the track [-60, 0] in dB
        int popularity;                     //The popularity of the track lately, default country is US
        int speechiness;                    //Metric of the track containing human voice
        int happiness;                      //Metric of the positiveness of the track
        int tempo;                          //The tempo of the track in BPM

        /* Least Useful */
        int duration_ms;                    //The length of the track in milliseconds (ms)
        std::string date;                   //Release date of the track in mm-dd-yyy or yyyy format
        int year;                           //The release year of the track
        int key;                            //The primary key signature of the track
        bool mode;                          //Whether the track begins with a major or minor chord progression

    public:
        //Default Constructor for Testing Purposes
        Song() : acousticness(0), danceability(0), duration_ms(0), energy(0), _explicit(false), id(""), instrumentalness(0), key(0), liveness(0), loudness(0), mode(false), name(""), popularity(0), date(0), speechiness(0), tempo(0), year(0), happiness(0) {}

        //Constructor
        Song(std::string acousticness, std::string artists, std::string danceability, std::string duration_ms, std::string energy, std::string _explicit, std::string id, std::string instrumentalness, std::string key, std::string liveness, std::string loudness, std::string mode, std::string name, std::string popularity, std::string date, std::string speechiness, std::string tempo, std::string year, std::string happiness)
        {
            this->acousticness = stoi(acousticness);
            int parseLocation = 0, beg = 0, end = 0, offset = 0;
            std::vector<std::string> a;
            while(parseLocation != -1 || parseLocation != artists.size() - 1)
            {
                beg = artists.find("'", parseLocation);
                end = artists.find("'", beg + 1);
                if(end == -1)
                {
                    end = artists.find("'", end + 1);
                }
                //No else because the above corrects the case where the name has an apostrophe in it already
                if(end != -1)
                {
                    a.push_back(artists.substr(beg + 1, end - 1));
                }
                parseLocation = end + 1;
            }
            this->artists = a;
            this->danceability = stoi(danceability);
            this->duration_ms = stoi(duration_ms);
            this->energy = stoi(energy);
            this->_explicit = (_explicit == "1") ? true : false;
            this->id = stoi(id);
            this->instrumentalness = stoi(instrumentalness);
            this->key = stoi(key); //0-11: C, Csharp, D, Eb, E, F, Fsharp, G, Ab, Bb, B
            this->liveness = stoi(liveness);
            this->loudness = stoi(loudness);
            this->mode = (mode == "1") ? true : false; //True = Major, False = Minor
            this->name = name;
            this->popularity = stoi(popularity);
            this->date = date;
            this->speechiness = stoi(speechiness);
            this->tempo = stoi(tempo);
            this->year = stoi(year);
            this->happiness = stoi(happiness);
        }

        //Getters
        int getAcousticness() { return acousticness; }
        std::vector<std::string> getArtists() { return artists; }
        int getDanceability() { return danceability; }
        int getDuration() { return duration_ms; }
        int getEnergy() { return energy; }
        bool getExplicit() { return _explicit; }
        std::string getID() { return id; }
        int getInstrumentalness() { return instrumentalness; }
        int getKey() { return key; }
        int getLiveness() { return liveness; }
        int getLoudness() { return loudness; }
        bool getMode() { return mode; }
        std::string getName() { return name; }
        int getPopularity() { return popularity; }
        std::string getDate() { return date; }
        int getSpeechiness() { return speechiness; }
        int getTempo() { return tempo; }
        int getYear() { return year; }
        int getHappiness() { return happiness; }
        
};