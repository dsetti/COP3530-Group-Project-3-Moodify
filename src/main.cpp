#include "song.h"
#include "retrieve_data.h"
#include <iostream>
#include <vector>
#include <string>
#include <map>

using namespace std;

float calcDistance(const vector<pair<bool, float>> criteria, Song song);
pair<float, string>* calcHeap(const unordered_map<string, Song>& songs, const int arrSize, const vector<pair<bool, float>> criteria);
void returnPlaylist(const pair<float, string>* heapPtr, const unordered_map<string, Song>& songs);

int main()
{
    unordered_map<string, Song> songs;
    vector<pair<bool, float>> criteria; //Vector containing whether or not to use the nth criteria, and the value given for said criteria.
    loadSongs(songs);

    songs.at(0).getArtists();
    //Input Interface goes here

    return 0;
}

//Calculates distance based on the criteria specified from the input song and returns a float value.
float calcDistance(const vector<pair<bool, float>> criteria, Song song)
{
    return 0.0f;
}
//Returns the pointer to an array of pairs of floats for the distance and strings for the IDs with a size specified by the user.
//Keeps only the arrSize smallest heaps, discards the rest.
pair<float, string>* calcHeap(const unordered_map<string, Song>& songs, const int arrSize, const vector<pair<bool, float>> criteria)
{
    pair<float, string> paired = make_pair(0.0f, "");
    pair<float, string>* ptr = &paired;
    return ptr;
}
//Prints out the playlist generated by the heap.
void returnPlaylist(const pair<float, string>* heapPtr, const unordered_map<string, Song>& songs)
{

}